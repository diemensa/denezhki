// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/diemensa/denezhki/internal/repository/postgres/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TransRepo is an autogenerated mock type for the TransRepo type
type TransRepo struct {
	mock.Mock
}

type TransRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TransRepo) EXPECT() *TransRepo_Expecter {
	return &TransRepo_Expecter{mock: &_m.Mock}
}

// GetAllAccountTransfers provides a mock function with given fields: c, accountID
func (_m *TransRepo) GetAllAccountTransfers(c context.Context, accountID uuid.UUID) ([]model.Transaction, error) {
	ret := _m.Called(c, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccountTransfers")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Transaction, error)); ok {
		return rf(c, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Transaction); ok {
		r0 = rf(c, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransRepo_GetAllAccountTransfers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccountTransfers'
type TransRepo_GetAllAccountTransfers_Call struct {
	*mock.Call
}

// GetAllAccountTransfers is a helper method to define mock.On call
//   - c context.Context
//   - accountID uuid.UUID
func (_e *TransRepo_Expecter) GetAllAccountTransfers(c interface{}, accountID interface{}) *TransRepo_GetAllAccountTransfers_Call {
	return &TransRepo_GetAllAccountTransfers_Call{Call: _e.mock.On("GetAllAccountTransfers", c, accountID)}
}

func (_c *TransRepo_GetAllAccountTransfers_Call) Run(run func(c context.Context, accountID uuid.UUID)) *TransRepo_GetAllAccountTransfers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TransRepo_GetAllAccountTransfers_Call) Return(_a0 []model.Transaction, _a1 error) *TransRepo_GetAllAccountTransfers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransRepo_GetAllAccountTransfers_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Transaction, error)) *TransRepo_GetAllAccountTransfers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransferByID provides a mock function with given fields: c, transactionID
func (_m *TransRepo) GetTransferByID(c context.Context, transactionID uuid.UUID) (*model.Transaction, error) {
	ret := _m.Called(c, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransferByID")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Transaction, error)); ok {
		return rf(c, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Transaction); ok {
		r0 = rf(c, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransRepo_GetTransferByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransferByID'
type TransRepo_GetTransferByID_Call struct {
	*mock.Call
}

// GetTransferByID is a helper method to define mock.On call
//   - c context.Context
//   - transactionID uuid.UUID
func (_e *TransRepo_Expecter) GetTransferByID(c interface{}, transactionID interface{}) *TransRepo_GetTransferByID_Call {
	return &TransRepo_GetTransferByID_Call{Call: _e.mock.On("GetTransferByID", c, transactionID)}
}

func (_c *TransRepo_GetTransferByID_Call) Run(run func(c context.Context, transactionID uuid.UUID)) *TransRepo_GetTransferByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TransRepo_GetTransferByID_Call) Return(_a0 *model.Transaction, _a1 error) *TransRepo_GetTransferByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransRepo_GetTransferByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Transaction, error)) *TransRepo_GetTransferByID_Call {
	_c.Call.Return(run)
	return _c
}

// LogTransaction provides a mock function with given fields: c, transactionID, fromID, toID, amount, success
func (_m *TransRepo) LogTransaction(c context.Context, transactionID uuid.UUID, fromID uuid.UUID, toID uuid.UUID, amount float64, success bool) error {
	ret := _m.Called(c, transactionID, fromID, toID, amount, success)

	if len(ret) == 0 {
		panic("no return value specified for LogTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, float64, bool) error); ok {
		r0 = rf(c, transactionID, fromID, toID, amount, success)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransRepo_LogTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogTransaction'
type TransRepo_LogTransaction_Call struct {
	*mock.Call
}

// LogTransaction is a helper method to define mock.On call
//   - c context.Context
//   - transactionID uuid.UUID
//   - fromID uuid.UUID
//   - toID uuid.UUID
//   - amount float64
//   - success bool
func (_e *TransRepo_Expecter) LogTransaction(c interface{}, transactionID interface{}, fromID interface{}, toID interface{}, amount interface{}, success interface{}) *TransRepo_LogTransaction_Call {
	return &TransRepo_LogTransaction_Call{Call: _e.mock.On("LogTransaction", c, transactionID, fromID, toID, amount, success)}
}

func (_c *TransRepo_LogTransaction_Call) Run(run func(c context.Context, transactionID uuid.UUID, fromID uuid.UUID, toID uuid.UUID, amount float64, success bool)) *TransRepo_LogTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(float64), args[5].(bool))
	})
	return _c
}

func (_c *TransRepo_LogTransaction_Call) Return(_a0 error) *TransRepo_LogTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransRepo_LogTransaction_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, float64, bool) error) *TransRepo_LogTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// PerformTransfer provides a mock function with given fields: c, transactionID, fromID, toID, fromNewBalance, toNewBalance, amount
func (_m *TransRepo) PerformTransfer(c context.Context, transactionID uuid.UUID, fromID uuid.UUID, toID uuid.UUID, fromNewBalance float64, toNewBalance float64, amount float64) error {
	ret := _m.Called(c, transactionID, fromID, toID, fromNewBalance, toNewBalance, amount)

	if len(ret) == 0 {
		panic("no return value specified for PerformTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, float64, float64, float64) error); ok {
		r0 = rf(c, transactionID, fromID, toID, fromNewBalance, toNewBalance, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransRepo_PerformTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformTransfer'
type TransRepo_PerformTransfer_Call struct {
	*mock.Call
}

// PerformTransfer is a helper method to define mock.On call
//   - c context.Context
//   - transactionID uuid.UUID
//   - fromID uuid.UUID
//   - toID uuid.UUID
//   - fromNewBalance float64
//   - toNewBalance float64
//   - amount float64
func (_e *TransRepo_Expecter) PerformTransfer(c interface{}, transactionID interface{}, fromID interface{}, toID interface{}, fromNewBalance interface{}, toNewBalance interface{}, amount interface{}) *TransRepo_PerformTransfer_Call {
	return &TransRepo_PerformTransfer_Call{Call: _e.mock.On("PerformTransfer", c, transactionID, fromID, toID, fromNewBalance, toNewBalance, amount)}
}

func (_c *TransRepo_PerformTransfer_Call) Run(run func(c context.Context, transactionID uuid.UUID, fromID uuid.UUID, toID uuid.UUID, fromNewBalance float64, toNewBalance float64, amount float64)) *TransRepo_PerformTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(float64), args[5].(float64), args[6].(float64))
	})
	return _c
}

func (_c *TransRepo_PerformTransfer_Call) Return(_a0 error) *TransRepo_PerformTransfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransRepo_PerformTransfer_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, float64, float64, float64) error) *TransRepo_PerformTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransRepo creates a new instance of TransRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransRepo {
	mock := &TransRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
