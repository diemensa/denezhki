// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/diemensa/denezhki/internal/repository/postgres/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AccountRepo is an autogenerated mock type for the AccountRepo type
type AccountRepo struct {
	mock.Mock
}

type AccountRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepo) EXPECT() *AccountRepo_Expecter {
	return &AccountRepo_Expecter{mock: &_m.Mock}
}

// GetAccBalanceByID provides a mock function with given fields: c, id
func (_m *AccountRepo) GetAccBalanceByID(c context.Context, id uuid.UUID) (float64, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccBalanceByID")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float64, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepo_GetAccBalanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccBalanceByID'
type AccountRepo_GetAccBalanceByID_Call struct {
	*mock.Call
}

// GetAccBalanceByID is a helper method to define mock.On call
//   - c context.Context
//   - id uuid.UUID
func (_e *AccountRepo_Expecter) GetAccBalanceByID(c interface{}, id interface{}) *AccountRepo_GetAccBalanceByID_Call {
	return &AccountRepo_GetAccBalanceByID_Call{Call: _e.mock.On("GetAccBalanceByID", c, id)}
}

func (_c *AccountRepo_GetAccBalanceByID_Call) Run(run func(c context.Context, id uuid.UUID)) *AccountRepo_GetAccBalanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountRepo_GetAccBalanceByID_Call) Return(_a0 float64, _a1 error) *AccountRepo_GetAccBalanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepo_GetAccBalanceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (float64, error)) *AccountRepo_GetAccBalanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccByAliasUsername provides a mock function with given fields: c, alias, owner
func (_m *AccountRepo) GetAccByAliasUsername(c context.Context, alias string, owner string) (*model.Account, error) {
	ret := _m.Called(c, alias, owner)

	if len(ret) == 0 {
		panic("no return value specified for GetAccByAliasUsername")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Account, error)); ok {
		return rf(c, alias, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Account); ok {
		r0 = rf(c, alias, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, alias, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepo_GetAccByAliasUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccByAliasUsername'
type AccountRepo_GetAccByAliasUsername_Call struct {
	*mock.Call
}

// GetAccByAliasUsername is a helper method to define mock.On call
//   - c context.Context
//   - alias string
//   - owner string
func (_e *AccountRepo_Expecter) GetAccByAliasUsername(c interface{}, alias interface{}, owner interface{}) *AccountRepo_GetAccByAliasUsername_Call {
	return &AccountRepo_GetAccByAliasUsername_Call{Call: _e.mock.On("GetAccByAliasUsername", c, alias, owner)}
}

func (_c *AccountRepo_GetAccByAliasUsername_Call) Run(run func(c context.Context, alias string, owner string)) *AccountRepo_GetAccByAliasUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccountRepo_GetAccByAliasUsername_Call) Return(_a0 *model.Account, _a1 error) *AccountRepo_GetAccByAliasUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepo_GetAccByAliasUsername_Call) RunAndReturn(run func(context.Context, string, string) (*model.Account, error)) *AccountRepo_GetAccByAliasUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccByID provides a mock function with given fields: c, id
func (_m *AccountRepo) GetAccByID(c context.Context, id uuid.UUID) (*model.Account, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccByID")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Account, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Account); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepo_GetAccByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccByID'
type AccountRepo_GetAccByID_Call struct {
	*mock.Call
}

// GetAccByID is a helper method to define mock.On call
//   - c context.Context
//   - id uuid.UUID
func (_e *AccountRepo_Expecter) GetAccByID(c interface{}, id interface{}) *AccountRepo_GetAccByID_Call {
	return &AccountRepo_GetAccByID_Call{Call: _e.mock.On("GetAccByID", c, id)}
}

func (_c *AccountRepo_GetAccByID_Call) Run(run func(c context.Context, id uuid.UUID)) *AccountRepo_GetAccByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountRepo_GetAccByID_Call) Return(_a0 *model.Account, _a1 error) *AccountRepo_GetAccByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepo_GetAccByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Account, error)) *AccountRepo_GetAccByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByAccID provides a mock function with given fields: c, id
func (_m *AccountRepo) GetUserByAccID(c context.Context, id uuid.UUID) (*model.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByAccID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepo_GetUserByAccID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByAccID'
type AccountRepo_GetUserByAccID_Call struct {
	*mock.Call
}

// GetUserByAccID is a helper method to define mock.On call
//   - c context.Context
//   - id uuid.UUID
func (_e *AccountRepo_Expecter) GetUserByAccID(c interface{}, id interface{}) *AccountRepo_GetUserByAccID_Call {
	return &AccountRepo_GetUserByAccID_Call{Call: _e.mock.On("GetUserByAccID", c, id)}
}

func (_c *AccountRepo_GetUserByAccID_Call) Run(run func(c context.Context, id uuid.UUID)) *AccountRepo_GetUserByAccID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountRepo_GetUserByAccID_Call) Return(_a0 *model.User, _a1 error) *AccountRepo_GetUserByAccID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepo_GetUserByAccID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *AccountRepo_GetUserByAccID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccBalance provides a mock function with given fields: c, id, newBal
func (_m *AccountRepo) UpdateAccBalance(c context.Context, id uuid.UUID, newBal float64) error {
	ret := _m.Called(c, id, newBal)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = rf(c, id, newBal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepo_UpdateAccBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccBalance'
type AccountRepo_UpdateAccBalance_Call struct {
	*mock.Call
}

// UpdateAccBalance is a helper method to define mock.On call
//   - c context.Context
//   - id uuid.UUID
//   - newBal float64
func (_e *AccountRepo_Expecter) UpdateAccBalance(c interface{}, id interface{}, newBal interface{}) *AccountRepo_UpdateAccBalance_Call {
	return &AccountRepo_UpdateAccBalance_Call{Call: _e.mock.On("UpdateAccBalance", c, id, newBal)}
}

func (_c *AccountRepo_UpdateAccBalance_Call) Run(run func(c context.Context, id uuid.UUID, newBal float64)) *AccountRepo_UpdateAccBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *AccountRepo_UpdateAccBalance_Call) Return(_a0 error) *AccountRepo_UpdateAccBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepo_UpdateAccBalance_Call) RunAndReturn(run func(context.Context, uuid.UUID, float64) error) *AccountRepo_UpdateAccBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepo creates a new instance of AccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepo {
	mock := &AccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
