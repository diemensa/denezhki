// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/diemensa/denezhki/internal/repository/postgres/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: c, userID, username, alias
func (_m *UserRepo) CreateAccount(c context.Context, userID uuid.UUID, username string, alias string) error {
	ret := _m.Called(c, userID, username, alias)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(c, userID, username, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type UserRepo_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - c context.Context
//   - userID uuid.UUID
//   - username string
//   - alias string
func (_e *UserRepo_Expecter) CreateAccount(c interface{}, userID interface{}, username interface{}, alias interface{}) *UserRepo_CreateAccount_Call {
	return &UserRepo_CreateAccount_Call{Call: _e.mock.On("CreateAccount", c, userID, username, alias)}
}

func (_c *UserRepo_CreateAccount_Call) Run(run func(c context.Context, userID uuid.UUID, username string, alias string)) *UserRepo_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserRepo_CreateAccount_Call) Return(_a0 error) *UserRepo_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_CreateAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) error) *UserRepo_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: c, username, password
func (_m *UserRepo) CreateUser(c context.Context, username string, password string) error {
	ret := _m.Called(c, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - password string
func (_e *UserRepo_Expecter) CreateUser(c interface{}, username interface{}, password interface{}) *UserRepo_CreateUser_Call {
	return &UserRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", c, username, password)}
}

func (_c *UserRepo_CreateUser_Call) Run(run func(c context.Context, username string, password string)) *UserRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepo_CreateUser_Call) Return(_a0 error) *UserRepo_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_CreateUser_Call) RunAndReturn(run func(context.Context, string, string) error) *UserRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccounts provides a mock function with given fields: c, userID
func (_m *UserRepo) GetUserAccounts(c context.Context, userID uuid.UUID) ([]model.Account, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccounts")
	}

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Account, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Account); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccounts'
type UserRepo_GetUserAccounts_Call struct {
	*mock.Call
}

// GetUserAccounts is a helper method to define mock.On call
//   - c context.Context
//   - userID uuid.UUID
func (_e *UserRepo_Expecter) GetUserAccounts(c interface{}, userID interface{}) *UserRepo_GetUserAccounts_Call {
	return &UserRepo_GetUserAccounts_Call{Call: _e.mock.On("GetUserAccounts", c, userID)}
}

func (_c *UserRepo_GetUserAccounts_Call) Run(run func(c context.Context, userID uuid.UUID)) *UserRepo_GetUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepo_GetUserAccounts_Call) Return(_a0 []model.Account, _a1 error) *UserRepo_GetUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUserAccounts_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Account, error)) *UserRepo_GetUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: c, userID
func (_m *UserRepo) GetUserByID(c context.Context, userID uuid.UUID) (*model.User, error) {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(c, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepo_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - c context.Context
//   - userID uuid.UUID
func (_e *UserRepo_Expecter) GetUserByID(c interface{}, userID interface{}) *UserRepo_GetUserByID_Call {
	return &UserRepo_GetUserByID_Call{Call: _e.mock.On("GetUserByID", c, userID)}
}

func (_c *UserRepo_GetUserByID_Call) Run(run func(c context.Context, userID uuid.UUID)) *UserRepo_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepo_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *UserRepo_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *UserRepo_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: c, username
func (_m *UserRepo) GetUserByUsername(c context.Context, username string) (*model.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserRepo_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - c context.Context
//   - username string
func (_e *UserRepo_Expecter) GetUserByUsername(c interface{}, username interface{}) *UserRepo_GetUserByUsername_Call {
	return &UserRepo_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", c, username)}
}

func (_c *UserRepo_GetUserByUsername_Call) Run(run func(c context.Context, username string)) *UserRepo_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_GetUserByUsername_Call) Return(_a0 *model.User, _a1 error) *UserRepo_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UserRepo_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: c, username, password
func (_m *UserRepo) ValidatePassword(c context.Context, username string, password string) error {
	ret := _m.Called(c, username, password)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type UserRepo_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - password string
func (_e *UserRepo_Expecter) ValidatePassword(c interface{}, username interface{}, password interface{}) *UserRepo_ValidatePassword_Call {
	return &UserRepo_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", c, username, password)}
}

func (_c *UserRepo_ValidatePassword_Call) Run(run func(c context.Context, username string, password string)) *UserRepo_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepo_ValidatePassword_Call) Return(_a0 error) *UserRepo_ValidatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_ValidatePassword_Call) RunAndReturn(run func(context.Context, string, string) error) *UserRepo_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
